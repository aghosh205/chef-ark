{"name":"Ark","body":"Overview        \r\n========\r\n\r\nAn ''ark'' is like an archive but ''Kewler''\r\n\r\nDoes the fetch-unpack-configure-build-install dance. This is a\r\nmodified  verion of Infochimps awesome install_from cookbook\r\n [http://github.com/infochimps-cookbooks/install_from]. It has been\r\n heavily refactored and extended to meet different use cases.\r\n\r\nGiven a project `pig`, with url `http://apache.org/pig/pig-0.8.0.tar.gz`, and\r\nthe default :path of `/usr/local`, this provider will\r\n\r\n* fetch  it to to `/var/cache/chef/`\r\n* unpack it to :path  (`/usr/local/pig-0.8.0`)\r\n* create a symlink for :home_dir (`/usr/local/pig`) pointing to :path\r\n* add specified binary commands to the enviroment PATH variable\r\n\r\nBy default, the ark will not run again if the :path is not\r\nempty. Ark provides many actions to accommodate different use cases,\r\nsuch as :dump, :cherry_pick, :put, and :install_with_make.\r\n\r\nAt this time ark only handles files available from URLs. It does not\r\nhandle local files.\r\n\r\n\r\nAttributes\r\n==========\r\n\r\nYou can customize the basic attributes to meet your organization's conventions\r\n\r\n* default[:ark][:apache_mirror] = 'http://apache.mirrors.tds.net'\r\n\r\n\r\nResources/Providers\r\n===================\r\n\r\n* ark - does the extract/build/configure dance\r\n\r\nActions \r\n=======\r\n\r\n- :install: extracts the file and creates a 'friendly' symbolic link\r\n  to the extracted directory path\r\n- :configure: configure ahead of the install action\r\n- :install_with_make: extracts the archive to a path, runs make, and\r\n  make install. It does _not_ run the configure step at this time\r\n- :dump: strips all directories from the archive and dumps the\r\n  contained files into a specified path\r\n- :cherry_pick: extract a specified file from an archive and places\r\n  in specified path\r\n- :put: extract the archive to a specified path, does not create any\r\n  symbolic links\r\n- :remove: removes the extracted directory and related symlink #TODO\r\n\r\n# :put\r\n\r\n## Relevant Attribute Parameters\r\n\r\n- path: path to extract to, defaults to '/usr/local'\r\n- has_binaries: array of binary commands to symlink to\r\n  /usr/local/bin/, you must specify the relative path example: [ 'bin/java', 'bin/javaws' ]\r\n- append_env_path: boolean, if true, append the ./bin directory of the\r\n  extracted directory to the global PATH variable for all users\r\n\r\n# :dump\r\n\r\n\r\nNOTE: This currently only works for zip archives\r\n\r\n## Relevant Attribute Parameters\r\n\r\n- path: path to dump files to \r\n- mode: file mode for app_home, is an integer\r\n- creates: if you are appending files to a given directory, ark\r\n  needs a condition to test whether the file has already been\r\n  extracted. You can specify with creates, a file whose existence\r\n  indicates the ark has previously been extracted and does not need to\r\n  be extracted again\r\n\r\n# :cherry_pick\r\n\r\n\r\n## Relevant Attribute Parameters\r\n\r\n- path: directory to place file in\r\n- creates: specific file to cherry-pick\r\n\r\n\r\nark\r\n===\r\n\r\n# Attribute Parameters\r\n\r\n- name: name of the package, defaults to the resource name\r\n- url: url for tarball, .tar.gz, .bin (oracle-specific), .war, and .zip\r\n  currently supported. Also supports special syntax\r\n  :name:version:apache_mirror: that will auto-magically construct\r\n  download url from the apache mirrors site\r\n- version: software version, defaults to \"1\" if not specified. The :dump, :cherry_pick, and :put actions do not use it\r\n- extension: The file extension of the file you are trying to\r\n  download. If not specified, ark tries to determine the file\r\n  extension by parsing the URL\r\n- checksum: sha256 checksum, used for security \r\n- mode: file mode for app_home, is an integer TODO\r\n- prefix_root: default prefix_root, for use with :install* actions\r\n- prefix_home: default directory prefix for a friendly symlink to the path, for\r\n  example  /usr/local/maven -> /usr/local/maven-2.2.1\r\n- prefix_bin: default directory to place a symlink to a binary\r\n  command, example /opt/bin/mvn ->\r\n  /opt/maven-2.2.1/bin/mvn , where the prefix_bin is \"/opt/bin\"\r\n- path: path to extract the ark to, by default is\r\n  /usr/local/<name>-<version> for the :install, :install_with_make actions\r\n  the :install* actions overwrite any user-provided values for :path\r\n- home_dir: symbolic link to the path :prefix_root/:name-:version,\r\n  defaults to :prefix_root/:name , , does not apply to :dump, :put, or\r\n  :cherry_pick actions\r\n- has_binaries: array of binary commands to symlink to\r\n  /usr/local/bin/, you must specify the relative path example: [ 'bin/java', 'bin/javaws' ]\r\n- append_env_path: boolean, similar to has_binaries but less granular\r\n  - If true, append the ./bin directory of the extracted directory to\r\n  the PATH environment  variable for all users, does this by placing a file in /etc/profile.d/ which will be read by all users\r\n  be added to the path. The commands are symbolically linked to\r\n  /usr/bin/* . Examples are mvn, java, javac, etc. This option\r\n  provides more granularity than the boolean option\r\n- environment: hash of environment variables to pass to invoked shell\r\n  commands like tar, unzip, configure, and make\r\n- strip_leading_dir: by default, ark strips the leading directory from\r\n  an archive, which is the default for both unzip and tar commands \r\n- autoconf_opts: an array of command line options for use with the GNU\r\n  autoconf script\r\n- make_opts: an array of command line options for use with make\r\n- owner: owner of extracted directory, set to \"root\" by default\r\n\r\n# Examples\r\n\r\n     # install Apache Ivy dependency resolution tool\r\n     ark \"ivy\" do\r\n       url 'http://someurl.example.com/ivy.tar.gz'\r\n       version '2.2.0'        \r\n       checksum '89ba5fde0c596db388c3bbd265b63007a9cc3df3a8e6d79a46780c1a39408cb5'\r\n       action :install\r\n     end\r\n    \r\nThis example copies ivy.tar.gz to /var/cache/chef/ivy-2.2.0.tar.gz,\r\nunpacks its contents to /usr/local/ivy-2.2.0/ -- stripping the\r\nleading directory, and symlinks /usr/local/ivy to /usr/local/ivy-2.2.0\r\n\r\n\r\n     ark 'jdk' do\r\n       url 'http://download.example.com/jdk-7u2-linux-x64.tar.gz'\r\n       version '7.2'\r\n       path \"/usr/local/jvm/\"\r\n       home_dir \"/usr/local/jvm/default\" \r\n       checksum  '89ba5fde0c596db388c3bbd265b63007a9cc3df3a8e6d79a46780c1a39408cb5'\r\n       append_env_path true\r\n       owner 'foobar'\r\n     end\r\n\r\nThis example copies jdk-7u2-linux-x64.tar.gz to /var/cache/chef/jdk-7.2.tar.gz,\r\nunpacks its contents to /usr/local/jvm/jdk-7.2/ -- stripping the\r\nleading directory, symlinks /usr/local/jvm/default to\r\n/usr/local/jvm/jdk-7.2, and adds /usr/local/jvm/jdk-7.2/bin/ to\r\nthe global PATH for all users. The user 'foobar' is the owner of the\r\n/usr/local/jvm/jdk-7.2 directory\r\n\r\n     # install Apache Ivy dependency resolution tool\r\n     # in <path>/resource_name in this case\r\n     # /usr/local/ivy, no symlink created\r\n     # it strips any leading directory if one exists in the tarball\r\n     ark \"ivy\" do\r\n        url 'http://someurl.example.com/ivy.tar.gz'\r\n        checksum '89ba5fde0c596db388c3bbd265b63007a9cc3df3a8e6d79a46780c1a39408cb5'\r\n        action :put\r\n     end\r\n\r\n     # install Apache Ivy dependency resolution tool\r\n     # in /home/foobar/ivy \r\n     # it does strip any leading directory if one exists\r\n     ark \"ivy\" do\r\n       path \"/home/foobar\r\n       url 'http://someurl.example.com/ivy.tar.gz'\r\n       checksum '89ba5fde0c596db388c3bbd265b63007a9cc3df3a8e6d79a46780c1a39408cb5'\r\n       action :put\r\n     end\r\n\r\n     \r\n\r\n     # strip all directories and dump files into path specified by \r\n     # the path attribute, you must specify the `creates` attribute\r\n     # in order to keep the extraction from running every time\r\n     # the directory path will be created if it doesn't already exist\r\n     ark \"my_jars\" do\r\n       url  \"http://example.com/bunch_of_jars.zip\"\r\n       path \"/usr/local/tomcat/lib\"\r\n       creates \"mysql.jar\"\r\n       owner \"tomcat\"       \r\n       action :dump\r\n     end\r\n\r\n     # extract specific files from a tarball, currently only handles\r\n     # one named file\r\n     ark 'mysql-connector-java' do\r\n       url 'http://oracle.com/mysql-connector.zip'\r\n       creates 'mysql-connector-java-5.0.8-bin.jar'\r\n       path '/usr/local/tomcat/lib'\r\n       action :cherry_pick\r\n     end\r\n\r\n\r\n     # build and install haproxy and use alternave values for\r\n     # prefix_root, prefix_home, and prefix_bin\r\n     ark \"haproxy\" do\r\n       url  \"http://haproxy.1wt.eu/download/1.5/src/snapshot/haproxy-ss-20120403.tar.gz\"\r\n       version \"1.5\"\r\n       checksum 'ba0424bf7d23b3a607ee24bbb855bb0ea347d7ffde0bec0cb12a89623cbaf911'\r\n       make_opts [ 'TARGET=linux26' ]\r\n       prefix_root '/opt'\r\n       prefix_home '/opt'\r\n       prefix_bin  '/opt/bin'\r\n       action :install_with_make\r\n     end    \r\n\r\n     # you can also pass multiple actions to ark and supply the file extension\r\n     # in case the file extension can not be determined by the URL\r\n     ark \"test_autogen\" do\r\n       url 'https://github.com/zeromq/libzmq/tarball/master'\r\n       extension \"tar.gz\"\r\n       action [ :configure, :build_with_make ]\r\n     end    \r\n\r\n\r\n     \r\n## License and Author\r\n\r\nAuthor::                Philip (flip) Kromer - Infochimps, Inc(<coders@infochimps.com>)  \r\nAuthor::                Bryan W. Berry (<bryan.berry@gmail.com>)  \r\nAuthor::                Denis Barishev (<denis.barishev@gmail.com>)  \r\nCopyright::             2011, Philip (flip) Kromer - Infochimps, Inc  \r\nCopyright::             2012, Bryan W. Berry  \r\nCopyright::             2012, Denis Barishev   \r\n\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n","tagline":"An archive unpacker and installer LWRP for Chef","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}